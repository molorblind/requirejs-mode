{"name":"Requirejs-mode","tagline":"Imporoved javascript AMD dependencies management for the one true editor.","body":"requirejs-mode\r\n==============\r\n\r\nImproved javascript [AMD](http://requirejs.org) dependencies management for the one true editor.\r\n\r\n[See it in action](http://www.youtube.com/watch?v=V6TZNPxpoeo)\r\n<iframe width=\"640\" height=\"360\" src=\"http://www.youtube.com/embed/V6TZNPxpoeo\" frameborder=\"0\" allowfullscreen></iframe>\r\n\r\n\r\n## Installation\r\n\r\nPackages are available in the [marmalade](http://marmalade-repo.org) and\r\n[MELPA](http://melpa.milkbox.net/) repositories, so if you use ELPA:\r\n\r\n```\r\nM-x package-install requirejs-mode\r\n```\r\n\r\nOtherwise, make sure you put the `requirejs-mode.el` in your load path.\r\n\r\nThen in your `init.el` file.\r\n\r\n```\r\n(require 'requirejs-mode)\r\n```\r\n\r\nIf you would like to automatically load requireJs mode when editing javascript, you can put the\r\nfollowing in your `init.el`. Replace `js2-mode-hook` by `javascript-mode-hook` if you don't use\r\njs2-mode.\r\n\r\n```\r\n(add-hook 'js2-mode-hook (lambda () (requirejs-mode)))\r\n```\r\n\r\n## Features\r\n\r\n### Importing a file as a dependency\r\n\r\nWhen working in a project, it can be error prone to try and remember the exact name and path\r\nof a javascript module you want to import in some other module.\r\n\r\n`M-x requirejs-import-file` fixes this problem by giving you a mini-buffer prompt from which \r\nyou can browse your file-system for the said module. It will then insert it in the dependencies\r\nlist of your current module definition and insert a CamelCased version of it's name in the\r\nfunction definition.\r\n\r\nIt goes the extra mile by doing some extra processing to the file-name you imported. \r\n\r\n* Trims the `.js` extension and transforms `dash-based-names` to `CamelCased` in function def.\r\n* Prepends `text!` in the dependency to make use of the text plugin of requirejs if the file\r\n  you import is a template.\r\n* Adds `View` to the variable name if the file you import is within a `views` folder.\r\n* Adds `Template` to the variable name if the file you import is within a `templates` folder.\r\n\r\nHere are a couple examples. Note: I use [Backbone.js](http://backbonejs.org) lately so most \r\nof these are Backbone related in some way, but not necessarely exclusive to it.\r\n\r\n* Importing `.../javascripts/models/item.js`\r\n\r\n  Will result in adding `'models/item'` in the dependencies list and `Item` in the function\r\n  definition.\r\n\r\n* Importing `.../javascripts/views/item.js`\r\n\r\n  Will result in adding `'views/item'` in the dependencies list and `ItemView` in the function\r\n  definition.\r\n  \r\n* Importing `.../javascripts/collections/items/sold-items.js`\r\n\r\n  Will result in adding `'collections/items/sold-items'` in the dependencies list and `SoldItems`\r\n  in the function definition.\r\n  \r\n* Importing `.../../templates/item.html`\r\n\r\n  Will result in adding `'text!templates/item.html'` in the dependencies list and `ItemTemplate`\r\n  in the function definition.\r\n  \r\n* Importing any file *not* within one of the `{models, views, collections, templates}` sub-folders.\r\n\r\n  Will result in adding `'file-name'` in the dependencies list and `FileName` in the function\r\n  definition. Thus assuming you have correctly setup your `require.config({ paths: {...} });`.\r\n  \r\n### Adding a known module as a dependency\r\n\r\nWhen you import a file as a dependency, it will save its `('dependency-name', DependencyDeclaration)`\r\npair in a temporary associative list for the life-time of your Emacs session. You can then\r\naccess these quickly by using `M-x requirejs-import-add` and pick the one you need. It will then\r\nbe inserted in your current module definition.\r\n\r\nSome defaults are already loaded in this temporary associative list for quick access:\r\n\r\n```\r\n'jquery'     -> $\r\n'underscore' -> _\r\n'backbone'   -> Backbone\r\n```\r\n\r\n### Creating an empty module\r\n\r\nThis functionnality is only there to circumvent the need to depend on a snippet system to\r\ncreate the boilerplate structure of the module. Notice that if the previous features don't\r\nfind a proper AMD structure within the current file, it will use this feature to create one\r\nand then insert the desired imports.\r\n\r\nExplicity, it generates:\r\n```\r\ndefine (\r\n    [],    \r\n    function ( ) {\r\n        \r\n    }\r\n);\r\n```\r\n\r\n## Keybindings\r\n\r\n* `C-c rf` : require-import-file\r\n* `C-c rc` : require-create\r\n* `C-c ra` : require-import-add\r\n\r\n## Dependencies\r\n\r\nNo dependencies, but it will use `ido` to auto-complete prompts if it is present.\r\n\r\n## Issues\r\n\r\nIf you find bugs or you would like new features to be implemented, use the [issue\r\ntracker](https://github.com/ricardmo/requirejs-mode/issues), or better, make a\r\npull request with the fixes.\r\n\r\n## License\r\nCopyright (C) 2013 Marc-Olivier Ricard\r\n\r\nThis program is free software: you can redistribute it and/or modify\r\nit under the terms of the GNU General Public License as published by\r\nthe Free Software Foundation, either version 3 of the License, or\r\n(at your option) any later version.\r\n\r\nThis program is distributed in the hope that it will be useful,\r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\nGNU General Public License for more details.\r\n\r\nYou should have received a copy of the GNU General Public License\r\nalong with this program.  If not, see <http://www.gnu.org/licenses/>.","google":"UA-37375728-1","note":"Don't delete this file! It's used internally to help with page regeneration."}